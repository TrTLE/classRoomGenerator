/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package classroomgenerator;

import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

public class App {
    public String getGreeting() {
        return "Hello World!";
    }

    public static void main(String[] args) {
        System.out.println(new App().getGreeting());

        final List<TableRow> tableRows = genTableRows();
        
        final List<Student> students = generateStudentList();
        
        final Classroom classroom = new Classroom(tableRows, students);
        
        classroom.generateClassPlan();

        System.out.println("__ students list __");
        System.out.println("students number : " + students.size());
        students.forEach(student -> {
            System.out.println(student);
            System.out.println();
        });

        displayTablePlan(classroom);
    }

    public static void displayTablePlan(final Classroom classroom) {
        
        try (FileWriter writer = new FileWriter("plan_de_classe.txt")) {
        
            writer.write("Plan de table classe:\n\n");
            System.out.println("Plan de classe:\n");        

            String previousTableGroup = "";
            for (TableRow tableRow : classroom.tableRowList.stream().sorted((o1, o2) -> o1.displayOrder < o2.displayOrder ? -1 : 1).collect(Collectors.toList())) {
                
                if (!tableRow.id.equals(previousTableGroup)){
                    previousTableGroup = tableRow.id;
                    writer.write("\n\n\n");
                    writer.write("[ " + tableRow.id + " ] \n\n");
                    System.out.print("\n\n\n");
                    System.out.println("[ " + tableRow.id + " ] \n\n");
                }
                
                for (Table table : tableRow.tableList.stream().sorted((o1, o2) -> Integer.parseInt(o1.id) < Integer.parseInt(o2.id) ? -1 : 1).collect(Collectors.toList())) {
                    switch (Integer.parseInt(table.id)) {                    
                        case 31:
                            // 31                
                            printTableToFile(table, writer);
                            writer.write("\t\t\t\t");
                            printTable(table);
                            System.out.print("\t\t");

                            final List<Table> talbe_44_45_46 = classroom.tableRowList.stream().filter(tr -> tr.tableList.stream().anyMatch(t -> t.getId().equals("44"))).findFirst().get().tableList;
                            // 44 45 46
                            talbe_44_45_46.stream()
                                .filter(t -> "44".equals(t.getId()) || "45".equals(t.getId()) || "46".equals(t.getId()))
                                .forEach(talbe_4x1 -> {
                                    try {
                                        printTableToFile(talbe_4x1, writer);
                                        printTable(talbe_4x1);
                                        if ("44".equals(talbe_4x1.getId()) || "45".equals(talbe_4x1.getId())) {
                                            try {
                                                writer.write("\t\t\t");
                                            } catch (IOException e) {
                                                e.printStackTrace();
                                            }
                                            System.out.print("\t");
                                        }
                                    } catch (IOException e) {
                                        e.printStackTrace();
                                    }
                            });
                            writer.write("\t\t\t");
                            System.out.print("\t\t");

                            // 52           
                            final Table talbe52 = classroom.tableRowList.stream().filter(tr -> tr.tableList.stream().anyMatch(t -> t.getId().equals("52"))).findFirst().get().tableList.stream().filter(t -> t.getId().equals("52")).findFirst().get();
                            printTableToFile(talbe52, writer);
                            writer.write("\n");
                            printTable(talbe52);                            
                            System.out.print("\n");
                            break;
                        case 32:
                            // 32
                            printTableToFile(table, writer);
                            writer.write("\t\t\t\t");
                            printTable(table);
                            System.out.print("\t\t");

                            final List<Table> talbe_4X = classroom.tableRowList.stream().filter(tr -> tr.tableList.stream().anyMatch(t -> t.getId().equals("44"))).findFirst().get().tableList;
                            // 43       47
                            talbe_4X.stream()
                                .filter(t -> "43".equals(t.getId()) || "47".equals(t.getId()))
                                .forEach(talbe_4x2 -> {
                                    try {
                                        printTableToFile(talbe_4x2, writer);
                                        printTable(talbe_4x2);
                                        if ("43".equals(talbe_4x2.getId())) {                                        
                                            writer.write("\t\t\t\t\t\t\t\t");
                                            System.out.print("\t\t\t\t");
                                        }
                                    } catch (IOException e) {
                                        e.printStackTrace();
                                    }
                            });

                            // 51
                            final Table talbe51 = classroom.tableRowList.stream().filter(tr -> tr.tableList.stream().anyMatch(t -> t.getId().equals("51"))).findFirst().get().tableList.stream().filter(t -> t.getId().equals("51")).findFirst().get();
                            writer.write("\t\t\t");
                            printTableToFile(talbe51, writer);
                            writer.write("\n");
                            System.out.print("\t\t");
                            printTable(talbe51);
                            System.out.print("\n");
                            break;
                        case 33:
                            // 33
                            printTableToFile(table, writer);
                            writer.write("\t\t\t\t");
                            printTable(table);
                            System.out.print("\t\t");

                            final List<Table> talbe_4XX = classroom.tableRowList.stream().filter(tr -> tr.tableList.stream().anyMatch(t -> t.getId().equals("44"))).findFirst().get().tableList;
                            // 42       48
                            talbe_4XX.stream().filter(t -> "42".equals(t.getId()) || "48".equals(t.getId()))
                            .forEach(talbe_4x3 -> {
                                try {
                                    printTableToFile(talbe_4x3, writer);
                                    writer.write("\t\t\t\t\t\t\t\t\t");
                                    printTable(talbe_4x3);
                                    System.out.print("\t\t\t\t");
                                } catch (IOException e) {
                                    e.printStackTrace();
                                }
                            });

                            writer.write("\n");
                            System.out.print("\n");
                            break;
                        case 51:
                        case 52:
                            // nothing to do, already display in 31, 32, 33
                            break;
                        case 41:
                            // 41
                            writer.write("\t\t\t\t\t\t");
                            printTableToFile(table, writer);
                            writer.write("\t\t\t\t\t\t\t\t\t\t");
                            System.out.print("\t\t");
                            printTable(table);
                            System.out.print("\t\t\t\t");

                            final Table talbe_49 = classroom.tableRowList.stream().filter(tr -> tr.tableList.stream().anyMatch(t -> t.getId().equals("44"))).findFirst().get().tableList.stream().filter(t -> "49".equals(t.getId())).findFirst().get();
                            // 49
                            printTableToFile(talbe_49, writer);
                            printTable(talbe_49);
                            break;
                        case 42:
                        case 43:
                            // nothing to do, already display in 31, 32, 33
                            break;
                        case 44:
                        case 45:
                        case 46:
                            // nothing to do, already display in 31, 32, 33
                            break;
                        case 47:
                        case 48:
                            // nothing to do, already display in 31, 32, 33
                            break;
                        case 49:
                            // nothing to do, already display in 41
                            break;
                        default:
                            printTableToFile(table, writer);
                            printTable(table);
                    }                
                }

                writer.write("\t\t");
                System.out.print("\t\t");
            }

            // Teacher's desk
            writer.write("\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t");
            writer.write("[                  Bureau                  ]");
            writer.write("\n");
            System.out.println("\n\u001B[33m\t\t\t\t\t\t\t\t[                  Bureau                  ]\n\u001B[0m");
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public static void printTable(Table table) {
        final String tableFormatedString = String.format("%-10s", table);
        if (table.canHoldAgited) {
            System.out.print("\u001B[31m[ " + tableFormatedString + " ]\u001B[0m ");
        } else {
            System.out.print("[ " + tableFormatedString + " ] ");
        }
    }

    public static void printTableToFile(Table table, FileWriter writer) throws IOException {
        final String tableFormatedString = String.format("%-10s", table);
        if (table.canHoldAgited) {
            writer.write("[ " + tableFormatedString + " ] ");
        } else {
            writer.write("[ " + tableFormatedString + " ] ");
        }
    }

    public static List<TableRow> genTableRows() {
        final List<TableRow> tableRows = new ArrayList<>();
        int displayOrder = 8;        

        // DEBUT DE LA CLASSE
        Table table21 = new Table("21", false, false);
        Table table22 = new Table("22", true);
        Table table23 = new Table("23", false, false);
        TableRow tableRow2 = new TableRow("DEBUT DE LA CLASSE", List.of(table21, table22, table23), displayOrder--);
        tableRows.add(tableRow2);

        Table table11 = new Table("11", true);
        Table table12 = new Table("12", false, false);
        Table table13 = new Table("13");
        TableRow tableRow1 = new TableRow("DEBUT DE LA CLASSE", List.of(table11, table12, table13), displayOrder--);
        tableRows.add(tableRow1);
        

        // MILLIEU DE LA CLASSE
        Table table51 = new Table("51", false, false);
        Table table52 = new Table("52", true);
        TableRow tableRow5 = new TableRow("MILIEU DE LA CLASSE", List.of(table51, table52), displayOrder--);
        tableRows.add(tableRow5);

        Table table41 = new Table("41", false, false);
        Table table42 = new Table("42", true);
        Table table43 = new Table("43", false, false);
        Table table44 = new Table("44");
        Table table45 = new Table("45");
        Table table46 = new Table("46");
        Table table47 = new Table("47");
        Table table48 = new Table("48");
        Table table49 = new Table("49");
        TableRow tableRow4 = new TableRow("MILIEU DE LA CLASSE", List.of(table41, table42, table43, table44, table45, table46, table47, table48, table49), displayOrder--);
        tableRows.add(tableRow4);

        Table table31 = new Table("31");
        Table table32 = new Table("32");
        Table table33 = new Table("33");
        TableRow tableRow3 = new TableRow("MILIEU DE LA CLASSE", List.of(table31, table32, table33), displayOrder--);
        tableRows.add(tableRow3);


        // ENTRE DEUX DE LA CLASSE
        Table table71 = new Table("71");
        Table table72 = new Table("72");
        TableRow tableRow7 = new TableRow("ENTRE DEUX DE LA CLASSE", List.of(table71, table72), displayOrder--);
        tableRows.add(tableRow7);

        Table table61 = new Table("61", false, false);
        Table table62 = new Table("62", true);
        TableRow tableRow6 = new TableRow("ENTRE DEUX DE LA CLASSE", List.of(table61, table62), displayOrder--);
        tableRows.add(tableRow6);


        // FOND DE LA CLASSE
        Table table101 = new Table("101", true);
        Table table102 = new Table("102", false, false);
        TableRow tableRow10 = new TableRow("FOND DE LA CLASSE", List.of(table101, table102), displayOrder--);
        tableRows.add(tableRow10);

        Table table91 = new Table("91");
        Table table92 = new Table("92");
        TableRow tableRow9 = new TableRow("FOND DE LA CLASSE", List.of(table91, table92), displayOrder--);
        tableRows.add(tableRow9);

        Table table81 = new Table("81");
        Table table82 = new Table("82");
        TableRow tableRow8 = new TableRow("FOND DE LA CLASSE", List.of(table81, table82), displayOrder--);
        tableRows.add(tableRow8);

        return tableRows;
    }
    
    public static List<Student> generateStudentList() {
        final List<Student> studentList = new ArrayList<>();

        // Generating students with predefined characteristics
        Student student1 = new Student("Smith", "John", false, false);
        Student student2 = new Student("Johnson", "Emily", true, false);
        Student student3 = new Student("Williams", "Michael", false, false);
        Student student4 = new Student("Brown", "Jessica", true, false);
        Student student5 = new Student("Jones", "David", true, false);
        Student student6 = new Student("Garcia", "Ashley", false, true);
        Student student7 = new Student("Miller", "Daniel", true, false);
        Student student8 = new Student("Davis", "Sarah", false, false);
        Student student9 = new Student("Rodriguez", "James", true, false);
        Student student10 = new Student("Martinez", "Emma", false, false);
        Student student11 = new Student("Wilson", "Olivia", true, false);
        Student student12 = new Student("Taylor", "Matthew", false, true);
        Student student13 = new Student("Anderson", "Sophia", true, false);
        Student student14 = new Student("Thomas", "Andrew", false, false);
        Student student15 = new Student("Jackson", "Madison", true, false);
        Student student16 = new Student("White", "William", false, true);
        Student student17 = new Student("Harris", "Emma", false, false);
        Student student18 = new Student("Martin", "Joseph", false, false);
        Student student19 = new Student("Thompson", "Chloe", false, true);
        Student student20 = new Student("Garcia", "Christopher", false, true);
        Student student21 = new Student("Martinez", "Ava", false, false);
        Student student22 = new Student("Robinson", "Daniel", false, false);
        Student student23 = new Student("Clark", "Samantha", false, true);
        Student student24 = new Student("Lewis", "Ethan", false, true);
        Student student25 = new Student("Lee", "Isabella", false, false);
        Student student26 = new Student("Walker", "Ryan", false, false);
        Student student27 = new Student("Hall", "Hannah", false, true);
        Student student28 = new Student("Allen", "Nathan", false, true);
        Student student29 = new Student("Young", "Oliver", false, false);
        Student student30 = new Student("Wright", "Sophie", false, false);

        // Adding students to the list
        studentList.add(student1);
        studentList.add(student2);
        studentList.add(student3);
        studentList.add(student4);
        studentList.add(student5);
        studentList.add(student6);
        studentList.add(student7);
        studentList.add(student8);
        studentList.add(student9);
        studentList.add(student10);
        studentList.add(student11);
        studentList.add(student12);
        studentList.add(student13);
        studentList.add(student14);
        studentList.add(student15);
        studentList.add(student16);
        studentList.add(student17);
        studentList.add(student18);
        studentList.add(student19);
        studentList.add(student20);
        studentList.add(student21);
        studentList.add(student22);
        studentList.add(student23);
        studentList.add(student24);
        studentList.add(student25);
        studentList.add(student26);
        studentList.add(student27);
        studentList.add(student28);
        studentList.add(student29);
        studentList.add(student30);

        return studentList;
    }
}
